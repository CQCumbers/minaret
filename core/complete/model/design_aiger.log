
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4008 (git sha1 396ad17e, clang 12.0.0 -fPIC -Os)


-- Executing script file `design_aiger.ys' --

1. Executing RTLIL frontend.
Input filename: design_nomem.il

2. Executing FLATTEN pass (flatten design).
Deleting now unused module minaret.
Deleting now unused module mfi_isa_m32.
Deleting now unused module mfi_inst_sub.
Deleting now unused module mfi_inst_st.
Deleting now unused module mfi_inst_or.
Deleting now unused module mfi_inst_ld.
Deleting now unused module mfi_inst_and.
Deleting now unused module mfi_inst_add.
<suppressed ~8 debug messages>

3. Executing SETUNDEF pass (replace undef values with defined constants).

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module testbench.
<suppressed ~58 debug messages>

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\testbench'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \testbench..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:230$127.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:230$127.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:231$125.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:231$125.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:232$123.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:232$123.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:233$121.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:233$121.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:234$119.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:234$119.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:235$117.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:235$117.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:237$139.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:237$139.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:238$137.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:238$137.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:239$135.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:239$135.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:240$133.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:240$133.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:241$131.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:241$131.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:242$129.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:242$129.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:244$151.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:244$151.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:245$149.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:245$149.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:246$147.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:246$147.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:247$145.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:247$145.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:248$143.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:248$143.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:249$141.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:249$141.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:251$157.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:251$157.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:252$156.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:252$156.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:253$155.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:253$155.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:254$154.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:254$154.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:255$153.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:255$153.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:256$152.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:256$152.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:258$163.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:258$163.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:259$162.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:259$162.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:260$161.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:260$161.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:261$160.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:261$160.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:262$159.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:262$159.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:263$158.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:263$158.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:265$169.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:265$169.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:266$168.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:266$168.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:267$167.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:267$167.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:268$166.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:268$166.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:269$165.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:269$165.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:272$181.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:272$181.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:273$179.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:273$179.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:274$177.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:274$177.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:279$193.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:279$193.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:280$191.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:280$191.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:281$189.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:281$189.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:282$187.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:282$187.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:283$185.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:283$185.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:286$199.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:286$199.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:287$198.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:287$198.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:288$197.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:288$197.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:289$196.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:289$196.
    dead port 1/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:290$195.
    dead port 2/2 on $mux $flatten\isa_spec.$ternary$isa_m32.v:290$195.
    dead port 1/2 on $mux $flatten\isa_spec.\inst_add.$ternary$inst_add.v:37$29.
    dead port 2/2 on $mux $flatten\isa_spec.\inst_add.$ternary$inst_add.v:37$29.
    dead port 1/2 on $mux $flatten\isa_spec.\inst_and.$ternary$inst_and.v:37$38.
    dead port 2/2 on $mux $flatten\isa_spec.\inst_and.$ternary$inst_and.v:37$38.
    dead port 1/2 on $mux $flatten\isa_spec.\inst_ld.$ternary$inst_ld.v:41$54.
    dead port 2/2 on $mux $flatten\isa_spec.\inst_ld.$ternary$inst_ld.v:41$54.
    dead port 1/2 on $mux $flatten\isa_spec.\inst_or.$ternary$inst_or.v:37$65.
    dead port 2/2 on $mux $flatten\isa_spec.\inst_or.$ternary$inst_or.v:37$65.
    dead port 1/2 on $mux $flatten\isa_spec.\inst_sub.$ternary$inst_sub.v:37$90.
    dead port 2/2 on $mux $flatten\isa_spec.\inst_sub.$ternary$inst_sub.v:37$90.
Removed 106 multiplexer ports.
<suppressed ~2 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \testbench.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\testbench'.
Removed a total of 0 cells.

4.6. Executing OPT_SHARE pass.

4.7. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 1-bit at position 0 on $flatten\dut.$procdff$272 ($dff) from module testbench.

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \testbench..
Removed 36 unused cells and 158 unused wires.
<suppressed ~104 debug messages>

4.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module testbench.
<suppressed ~27 debug messages>

4.10. Rerunning OPT passes. (Maybe there is more to do..)

4.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \testbench..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \testbench.
Performed a total of 0 changes.

4.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\testbench'.
Removed a total of 0 cells.

4.14. Executing OPT_SHARE pass.

4.15. Executing OPT_DFF pass (perform DFF optimizations).

4.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \testbench..
Removed 34 unused cells and 143 unused wires.
<suppressed ~156 debug messages>

4.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module testbench.
<suppressed ~10 debug messages>

4.18. Rerunning OPT passes. (Maybe there is more to do..)

4.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \testbench..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \testbench.
Performed a total of 0 changes.

4.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\testbench'.
Removed a total of 0 cells.

4.22. Executing OPT_SHARE pass.

4.23. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $procdff$267 ($dff) from module testbench.

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \testbench..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module testbench.

4.26. Rerunning OPT passes. (Maybe there is more to do..)

4.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \testbench..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \testbench.
Performed a total of 0 changes.

4.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\testbench'.
Removed a total of 0 cells.

4.30. Executing OPT_SHARE pass.

4.31. Executing OPT_DFF pass (perform DFF optimizations).

4.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \testbench..

4.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module testbench.

4.34. Finished OPT passes. (There is nothing left to do.)

5. Executing TECHMAP pass (map to technology primitives).

5.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~68 debug messages>

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module testbench.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\testbench'.
Removed a total of 0 cells.

6.3. Executing OPT_DFF pass (perform DFF optimizations).

6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \testbench..

6.5. Finished fast OPT passes.

7. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\testbench' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \testbench..

10. Printing statistics.

=== testbench ===

   Number of wires:                137
   Number of wire bits:           2424
   Number of public wires:         135
   Number of public wire bits:    2422
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_P_                        1
     $anyseq                         1
     $assert                         1

11. Executing AIGER backend.

End of script. Logfile hash: e1890743d7, CPU: user 0.12s system 0.01s
Yosys 0.9+4008 (git sha1 396ad17e, clang 12.0.0 -fPIC -Os)
Time spent: 29% 6x opt_clean (0 sec), 24% 6x opt_expr (0 sec), ...
