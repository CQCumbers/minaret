
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4008 (git sha1 396ad17e, clang 12.0.0 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: pc_fwd.sv
Parsing SystemVerilog input from `pc_fwd.sv' to AST representation.
Generating RTLIL representation for module `\mfi_testbench'.
Generating RTLIL representation for module `\mfi_pc_fwd_check'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /Users/alexanderzhang/Documents/classes/minaret/core/../core/wrapper.sv
Parsing SystemVerilog input from `/Users/alexanderzhang/Documents/classes/minaret/core/../core/wrapper.sv' to AST representation.
Generating RTLIL representation for module `\mfi_wrapper'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v
Parsing Verilog input from `/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v' to AST representation.
Generating RTLIL representation for module `\minaret'.
Successfully finished Verilog frontend.

4. Executing PREP pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \mfi_testbench
Used module:     \mfi_wrapper
Used module:         \minaret
Used module:     \mfi_pc_fwd_check

4.1.2. Analyzing design hierarchy..
Top module:  \mfi_testbench
Used module:     \mfi_wrapper
Used module:         \minaret
Used module:     \mfi_pc_fwd_check
Removed 0 unused modules.
Module mfi_pc_fwd_check directly or indirectly contains formal properties -> setting "keep" attribute.
Module mfi_testbench directly or indirectly contains formal properties -> setting "keep" attribute.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:138$60 in module minaret.
Marked 1 switch rules as full_case in process $proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:125$49 in module minaret.
Removed 2 dead cases from process $proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45 in module minaret.
Marked 1 switch rules as full_case in process $proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45 in module minaret.
Marked 4 switch rules as full_case in process $proc$mfi_pc_fwd_check.sv:11$17 in module mfi_pc_fwd_check.
Removed a total of 2 dead cases.

4.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 42 assignments to connections.

4.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:0$40'.
  Set init value: $formal$mfi_pc_fwd_check.sv:23$15_EN = 1'0
Found init rule in `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:0$38'.
  Set init value: $formal$mfi_pc_fwd_check.sv:21$14_EN = 1'0
Found init rule in `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:0$36'.
  Set init value: $formal$mfi_pc_fwd_check.sv:19$13_EN = 1'0
Found init rule in `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:7$35'.
  Set init value: \expect_pc_valid = 1'0
Found init rule in `\mfi_testbench.$proc$mfi_testbench.sv:10$12'.
  Set init value: \cycle_reg = 8'00000000

4.2.5. Executing PROC_ARST pass (detect async resets in processes).

4.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
Creating decoders for process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:138$60'.
     1/1: $1\alu_out[31:0]
Creating decoders for process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:125$49'.
     1/3: $1$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$53
     2/3: $1$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_ADDR[3:0]$52
     3/3: $0\pc[31:0]
Creating decoders for process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45'.
     1/1: { $1\pc_src[0:0] $1\A_src[0:0] $1\B_src[1:0] $1\alu_op[2:0] $1\wb_src[0:0] $1\wb[0:0] $1\ld_ty[0:0] $1\st_ty[0:0] $1\br[0:0] }
Creating decoders for process `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:0$40'.
Creating decoders for process `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:0$38'.
Creating decoders for process `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:0$36'.
Creating decoders for process `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:7$35'.
Creating decoders for process `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:11$17'.
     1/14: $4\expect_pc_valid[0:0]
     2/14: $4\expect_pc[31:0]
     3/14: $3\expect_pc_valid[0:0]
     4/14: $3\expect_pc[31:0]
     5/14: $2\expect_pc_valid[0:0]
     6/14: $2\expect_pc[31:0]
     7/14: $1\expect_pc_valid[0:0]
     8/14: $1\expect_pc[31:0]
     9/14: $0$formal$mfi_pc_fwd_check.sv:19$13_EN[0:0]$19
    10/14: $0$formal$mfi_pc_fwd_check.sv:19$13_CHECK[0:0]$18
    11/14: $0$formal$mfi_pc_fwd_check.sv:21$14_EN[0:0]$21
    12/14: $0$formal$mfi_pc_fwd_check.sv:21$14_CHECK[0:0]$20
    13/14: $0$formal$mfi_pc_fwd_check.sv:23$15_EN[0:0]$23
    14/14: $0$formal$mfi_pc_fwd_check.sv:23$15_CHECK[0:0]$22
Creating decoders for process `\mfi_testbench.$proc$mfi_testbench.sv:10$12'.
Creating decoders for process `\mfi_testbench.$proc$mfi_testbench.sv:13$6'.

4.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\minaret.\alu_sum' from process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:138$60'.
Latch inferred for signal `\minaret.\alu_out' from process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:138$60': $auto$proc_dlatch.cc:427:proc_dlatch$190
No latch inferred for signal `\minaret.\pc_src' from process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45'.
No latch inferred for signal `\minaret.\A_src' from process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45'.
No latch inferred for signal `\minaret.\B_src' from process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45'.
No latch inferred for signal `\minaret.\alu_op' from process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45'.
No latch inferred for signal `\minaret.\wb_src' from process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45'.
No latch inferred for signal `\minaret.\wb' from process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45'.
No latch inferred for signal `\minaret.\ld_ty' from process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45'.
No latch inferred for signal `\minaret.\st_ty' from process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45'.
No latch inferred for signal `\minaret.\br' from process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45'.

4.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\minaret.\mfi_valid' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$225' with positive edge clock.
Creating register for signal `\minaret.\mfi_order' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$226' with positive edge clock.
Creating register for signal `\minaret.\mfi_inst' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$227' with positive edge clock.
Creating register for signal `\minaret.\mfi_trap' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$228' with positive edge clock.
Creating register for signal `\minaret.\mfi_halt' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$229' with positive edge clock.
Creating register for signal `\minaret.\mfi_intr' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$230' with positive edge clock.
Creating register for signal `\minaret.\mfi_src1_addr' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$231' with positive edge clock.
Creating register for signal `\minaret.\mfi_src2_addr' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$232' with positive edge clock.
Creating register for signal `\minaret.\mfi_src1_rdata' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$233' with positive edge clock.
Creating register for signal `\minaret.\mfi_src2_rdata' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$234' with positive edge clock.
Creating register for signal `\minaret.\mfi_dest_addr' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$235' with positive edge clock.
Creating register for signal `\minaret.\mfi_dest_wdata' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$236' with positive edge clock.
Creating register for signal `\minaret.\mfi_pc_rdata' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$237' with positive edge clock.
Creating register for signal `\minaret.\mfi_pc_wdata' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$238' with positive edge clock.
Creating register for signal `\minaret.\mfi_mem_addr' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$239' with positive edge clock.
Creating register for signal `\minaret.\mfi_mem_rmask' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$240' with positive edge clock.
Creating register for signal `\minaret.\mfi_mem_wmask' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$241' with positive edge clock.
Creating register for signal `\minaret.\mfi_mem_rdata' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$242' with positive edge clock.
Creating register for signal `\minaret.\mfi_mem_wdata' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$243' with positive edge clock.
Creating register for signal `\minaret.\mfi_mode' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$244' with positive edge clock.
Creating register for signal `\minaret.\mfi_ixl' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
  created $dff cell `$procdff$245' with positive edge clock.
Creating register for signal `\minaret.\pc' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:125$49'.
  created $dff cell `$procdff$246' with positive edge clock.
Creating register for signal `\minaret.$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_ADDR' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:125$49'.
  created $dff cell `$procdff$247' with positive edge clock.
Creating register for signal `\minaret.$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN' using process `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:125$49'.
  created $dff cell `$procdff$248' with positive edge clock.
Creating register for signal `\mfi_pc_fwd_check.\expect_pc' using process `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:11$17'.
  created $dff cell `$procdff$249' with positive edge clock.
Creating register for signal `\mfi_pc_fwd_check.\expect_pc_valid' using process `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:11$17'.
  created $dff cell `$procdff$250' with positive edge clock.
Creating register for signal `\mfi_pc_fwd_check.$formal$mfi_pc_fwd_check.sv:19$13_CHECK' using process `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:11$17'.
  created $dff cell `$procdff$251' with positive edge clock.
Creating register for signal `\mfi_pc_fwd_check.$formal$mfi_pc_fwd_check.sv:19$13_EN' using process `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:11$17'.
  created $dff cell `$procdff$252' with positive edge clock.
Creating register for signal `\mfi_pc_fwd_check.$formal$mfi_pc_fwd_check.sv:21$14_CHECK' using process `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:11$17'.
  created $dff cell `$procdff$253' with positive edge clock.
Creating register for signal `\mfi_pc_fwd_check.$formal$mfi_pc_fwd_check.sv:21$14_EN' using process `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:11$17'.
  created $dff cell `$procdff$254' with positive edge clock.
Creating register for signal `\mfi_pc_fwd_check.$formal$mfi_pc_fwd_check.sv:23$15_CHECK' using process `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:11$17'.
  created $dff cell `$procdff$255' with positive edge clock.
Creating register for signal `\mfi_pc_fwd_check.$formal$mfi_pc_fwd_check.sv:23$15_EN' using process `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:11$17'.
  created $dff cell `$procdff$256' with positive edge clock.
Creating register for signal `\mfi_testbench.\cycle_reg' using process `\mfi_testbench.$proc$mfi_testbench.sv:13$6'.
  created $dff cell `$procdff$257' with positive edge clock.

4.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:157$67'.
Found and cleaned up 1 empty switch in `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:138$60'.
Removing empty process `minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:138$60'.
Found and cleaned up 3 empty switches in `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:125$49'.
Removing empty process `minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:125$49'.
Found and cleaned up 1 empty switch in `\minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45'.
Removing empty process `minaret.$proc$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:102$45'.
Removing empty process `mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:0$40'.
Removing empty process `mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:0$38'.
Removing empty process `mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:0$36'.
Removing empty process `mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:7$35'.
Found and cleaned up 5 empty switches in `\mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:11$17'.
Removing empty process `mfi_pc_fwd_check.$proc$mfi_pc_fwd_check.sv:11$17'.
Removing empty process `mfi_testbench.$proc$mfi_testbench.sv:10$12'.
Removing empty process `mfi_testbench.$proc$mfi_testbench.sv:13$6'.
Cleaned up 10 empty switches.

4.3. Executing FLATTEN pass (flatten design).
Deleting now unused module minaret.
Deleting now unused module mfi_wrapper.
Deleting now unused module mfi_pc_fwd_check.
<suppressed ~3 debug messages>

4.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module mfi_testbench.
<suppressed ~13 debug messages>

4.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mfi_testbench..
Removed 7 unused cells and 132 unused wires.
<suppressed ~12 debug messages>

4.6. Executing CHECK pass (checking for obvious problems).
Checking module mfi_testbench...
Found and reported 0 problems.

4.7. Executing OPT pass (performing simple optimizations).

4.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mfi_testbench.

4.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mfi_testbench'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

4.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mfi_testbench..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\checker_inst.$procmux$100.
    dead port 1/2 on $mux $flatten\checker_inst.$procmux$103.
    dead port 1/2 on $mux $flatten\checker_inst.$procmux$109.
    dead port 1/2 on $mux $flatten\checker_inst.$procmux$112.
    dead port 1/2 on $mux $flatten\checker_inst.$procmux$136.
    dead port 1/2 on $mux $flatten\checker_inst.$procmux$142.
    dead port 2/2 on $mux $flatten\wrapper.\dut.$procmux$86.
Removed 7 multiplexer ports.
<suppressed ~22 debug messages>

4.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mfi_testbench.
    New ctrl vector for $pmux cell $flatten\wrapper.\dut.$procmux$74: { $flatten\wrapper.\dut.$procmux$77_CMP $flatten\wrapper.\dut.$procmux$76_CMP $flatten\wrapper.\dut.$procmux$75_CMP }
    Consolidated identical input bits for $mux cell $flatten\wrapper.\dut.$procmux$81:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51
      New ports: A=1'0, B=1'1, Y=$flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0]
      New connections: $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [31:1] = { $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] $flatten\wrapper.\dut.$0$memwr$\regs$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:126$44_EN[31:0]$51 [0] }
  Optimizing cells in module \mfi_testbench.
Performed a total of 2 changes.

4.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mfi_testbench'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

4.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mfi_testbench..
Removed 0 unused cells and 15 unused wires.
<suppressed ~2 debug messages>

4.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module mfi_testbench.

4.7.8. Rerunning OPT passes. (Maybe there is more to do..)

4.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mfi_testbench..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

4.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mfi_testbench.
Performed a total of 0 changes.

4.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mfi_testbench'.
Removed a total of 0 cells.

4.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mfi_testbench..

4.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module mfi_testbench.

4.7.14. Finished OPT passes. (There is nothing left to do.)

4.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 24 bits (of 32) from mux cell mfi_testbench.$ternary$mfi_testbench.sv:11$5 ($mux).
Removed top 31 bits (of 32) from port B of cell mfi_testbench.$add$mfi_testbench.sv:14$8 ($add).
Removed top 23 bits (of 32) from port Y of cell mfi_testbench.$add$mfi_testbench.sv:14$8 ($add).
Removed top 24 bits (of 32) from mux cell mfi_testbench.$ternary$mfi_testbench.sv:14$9 ($mux).
Removed top 28 bits (of 32) from port B of cell mfi_testbench.$lt$mfi_testbench.sv:19$10 ($lt).
Removed top 3 bits (of 8) from port B of cell mfi_testbench.$eq$mfi_testbench.sv:24$11 ($eq).
Removed top 31 bits (of 32) from port B of cell mfi_testbench.$flatten\checker_inst.$sub$mfi_pc_fwd_check.sv:16$24 ($sub).
Removed top 29 bits (of 32) from port B of cell mfi_testbench.$flatten\wrapper.\dut.$add$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:123$48 ($add).
Removed top 19 bits (of 32) from port A of cell mfi_testbench.$flatten\wrapper.\dut.$shl$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:133$55 ($shl).
Removed top 31 bits (of 32) from mux cell mfi_testbench.$flatten\wrapper.\dut.$ternary$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:158$69 ($mux).
Removed top 1 bits (of 3) from port B of cell mfi_testbench.$flatten\wrapper.\dut.$procmux$76_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell mfi_testbench.$flatten\wrapper.\dut.$procmux$77_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell mfi_testbench.$flatten\wrapper.\dut.$procmux$78_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell mfi_testbench.$flatten\wrapper.\dut.$procmux$92_CMP0 ($eq).
Removed top 5 bits (of 12) from mux cell mfi_testbench.$flatten\wrapper.\dut.$procmux$91 ($pmux).
Removed top 3 bits (of 8) from port B of cell mfi_testbench.$flatten\wrapper.\dut.$procmux$93_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell mfi_testbench.$flatten\wrapper.\dut.$procmux$94_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell mfi_testbench.$flatten\wrapper.\dut.$procmux$95_CMP0 ($eq).
Removed cell mfi_testbench.$flatten\wrapper.\dut.$procdff$229 ($dff).
Removed cell mfi_testbench.$flatten\wrapper.\dut.$procdff$239 ($dff).
Removed cell mfi_testbench.$flatten\wrapper.\dut.$procdff$240 ($dff).
Removed top 1 bits (of 9) from port Y of cell mfi_testbench.$add$mfi_testbench.sv:14$8 ($add).
Removed top 24 bits (of 32) from wire mfi_testbench.$add$mfi_testbench.sv:14$8_Y.
Removed top 31 bits (of 32) from wire mfi_testbench.$flatten\wrapper.\dut.$eq$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:145$66_Y.
Removed top 31 bits (of 32) from wire mfi_testbench.$ne$mfi_testbench.sv:14$7_Y.

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mfi_testbench..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

4.10. Executing MEMORY_COLLECT pass (generating $mem cells).

4.11. Executing OPT pass (performing simple optimizations).

4.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mfi_testbench.
<suppressed ~6 debug messages>

4.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mfi_testbench'.
Removed a total of 0 cells.

4.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mfi_testbench..
Removed 1 unused cells and 5 unused wires.
<suppressed ~3 debug messages>

4.11.4. Finished fast OPT passes.

4.12. Printing statistics.

=== mfi_testbench ===

   Number of wires:                183
   Number of wire bits:           2478
   Number of public wires:         118
   Number of public wire bits:    1869
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 96
     $add                            4
     $and                            4
     $anyconst                       1
     $anyseq                         2
     $assert                         1
     $assume                         3
     $dff                           21
     $dlatch                         1
     $eq                            13
     $initstate                      1
     $logic_and                      1
     $logic_not                      2
     $lt                             1
     $mem                            1
     $mux                           30
     $ne                             1
     $neg                            1
     $not                            4
     $or                             1
     $pmux                           2
     $sub                            1

4.13. Executing CHECK pass (checking for obvious problems).
Checking module mfi_testbench...
Found and reported 0 problems.

5. Executing MEMORY_NORDFF pass (extracting $dff cells from memories).

6. Executing ASYNC2SYNC pass.
Replacing mfi_testbench.$flatten\wrapper.\dut.$auto$proc_dlatch.cc:427:proc_dlatch$190 ($dlatch): EN=$flatten\wrapper.\dut.$auto$rtlil.cc:2126:ReduceOr$223, D=$flatten\wrapper.\dut.$0\alu_out[31:0], Q=\wrapper.dut.alu_out

7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mfi_testbench..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

8. Executing SETUNDEF pass (replace undef values with defined constants).

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mfi_testbench.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mfi_testbench'.
Removed a total of 0 cells.

9.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$257 ($dff) from module mfi_testbench (D = $add$mfi_testbench.sv:14$8_Y, Q = \cycle_reg, rval = 8'00000001).
Adding SRST signal on $flatten\wrapper.\dut.$procdff$246 ($dff) from module mfi_testbench (D = \wrapper.dut.pc4, Q = \wrapper.dut.pc, rval = 0).
Adding SRST signal on $flatten\wrapper.\dut.$procdff$226 ($dff) from module mfi_testbench (D = $flatten\wrapper.\dut.$add$/Users/alexanderzhang/Documents/classes/minaret/core/../core/minaret.v:159$70_Y, Q = \wrapper.dut.mfi_order, rval = 0).
Adding SRST signal on $flatten\wrapper.\dut.$procdff$225 ($dff) from module mfi_testbench (D = \wrapper.inst_valid, Q = \wrapper.dut.mfi_valid, rval = 1'0).
Adding SRST signal on $flatten\checker_inst.$procdff$256 ($dff) from module mfi_testbench (D = $flatten\checker_inst.$procmux$175_Y, Q = $flatten\checker_inst.$formal$mfi_pc_fwd_check.sv:23$15_EN, rval = 1'0).
Adding SRST signal on $flatten\checker_inst.$procdff$250 ($dff) from module mfi_testbench (D = $flatten\checker_inst.$2\expect_pc_valid[0:0], Q = \checker_inst.expect_pc_valid, rval = 1'0).
Adding EN signal on $flatten\checker_inst.$procdff$249 ($dff) from module mfi_testbench (D = $flatten\checker_inst.$2\expect_pc[31:0], Q = \checker_inst.expect_pc).

9.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mfi_testbench..
Removed 9 unused cells and 10 unused wires.
<suppressed ~11 debug messages>

9.5. Rerunning OPT passes. (Removed registers in this run.)

9.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module mfi_testbench.

9.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mfi_testbench'.
Removed a total of 0 cells.

9.8. Executing OPT_DFF pass (perform DFF optimizations).

9.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mfi_testbench..

9.10. Finished fast OPT passes.

10. Executing CHECK pass (checking for obvious problems).
Checking module mfi_testbench...
Found and reported 0 problems.

11. Executing HIERARCHY pass (managing design hierarchy).

11.1. Analyzing design hierarchy..
Top module:  \mfi_testbench

11.2. Analyzing design hierarchy..
Top module:  \mfi_testbench
Removed 0 unused modules.
Module mfi_testbench directly or indirectly contains formal properties -> setting "keep" attribute.

12. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: 25344d56e6, CPU: user 0.18s system 0.02s
Yosys 0.9+4008 (git sha1 396ad17e, clang 12.0.0 -fPIC -Os)
Time spent: 31% 8x opt_clean (0 sec), 17% 3x check (0 sec), ...
